{"version":3,"file":"index.cjs","sources":["../src/index.js"],"sourcesContent":["/**\n * Convert HTML to JSON or Object\n * @author Yousuf Kalim\n */\n\n/**\n * @param element The HTML string or element to convert to JSON.\n * @param json A boolean to indicate if the output should be a JSON string.\n * @returns {Promise<unknown>}\n */\nfunction HTMLParser(element, json = false) {\n  return new Promise((resolve, reject) => {\n    try {\n      let treeObject = {};\n      let parser;\n      let docNode;\n\n      // If string convert to document Node\n      if (typeof element === 'string') {\n        parser = new DOMParser();\n        docNode = parser.parseFromString(element, 'text/xml');\n        element = docNode.firstChild;\n      }\n\n      //Recursively loop through DOM elements and assign properties to object\n      const treeHTML = (element, object) => {\n        object['type'] = element.nodeName;\n        let nodeList = element.childNodes;\n        if (nodeList !== null) {\n          if (nodeList.length) {\n            object['content'] = [];\n            for (let i = 0; i < nodeList.length; i++) {\n              if (nodeList[i].nodeType === 3) {\n                object['content'].push(nodeList[i].nodeValue);\n              } else {\n                object['content'].push({});\n                treeHTML(nodeList[i], object['content'][object['content'].length - 1]);\n              }\n            }\n          }\n        }\n        if (element.attributes !== null) {\n          if (element.attributes.length) {\n            object['attributes'] = {};\n            for (let i = 0; i < element.attributes.length; i++) {\n              object['attributes'][element.attributes[i].nodeName] =\n                element.attributes[i].nodeValue;\n            }\n          }\n        }\n      };\n\n      treeHTML(element, treeObject);\n\n      resolve(json ? JSON.stringify(treeObject) : treeObject);\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n\nexport default HTMLParser;\n"],"names":["element","json","Promise","resolve","reject","docNode","treeObject","DOMParser","parseFromString","firstChild","object","nodeName","nodeList","childNodes","length","i","nodeType","push","nodeValue","treeHTML","attributes","JSON","stringify","e"],"mappings":"eAUA,SAAoBA,EAASC,GAC3B,YAD+B,IAAJA,IAAAA,GAAO,GACvBC,IAAAA,QAAQ,SAACC,EAASC,GAC3B,IACE,IAEWC,EAFPC,EAAa,CAAE,EAKI,iBAALN,IAEhBK,GADS,IAAeE,WACPC,gBAAgBR,EAAS,YAC1CA,EAAUK,EAAQI,YAIH,WAACT,EAASU,GACzBA,EAAa,KAAIV,EAAQW,SACzB,IAAIC,EAAWZ,EAAQa,WACvB,GAAiB,OAAbD,GACEA,EAASE,OAAQ,CACnBJ,EAAgB,QAAI,GACpB,IAAK,IAAKK,EAAG,EAAGA,EAAIH,EAASE,OAAQC,IACN,IAAzBH,EAASG,GAAGC,SACdN,EAAgB,QAAEO,KAAKL,EAASG,GAAGG,YAEnCR,EAAgB,QAAEO,KAAK,CAAA,GACvBE,EAASP,EAASG,GAAIL,EAAgB,QAAEA,EAAgB,QAAEI,OAAS,IAGzE,CAEF,GAA2B,OAAvBd,EAAQoB,YACNpB,EAAQoB,WAAWN,OAAQ,CAC7BJ,EAAmB,WAAI,CAAA,EACvB,IAAK,IAAIK,EAAI,EAAGA,EAAIf,EAAQoB,WAAWN,OAAQC,IAC7CL,EAAmB,WAAEV,EAAQoB,WAAWL,GAAGJ,UACzCX,EAAQoB,WAAWL,GAAGG,SAE5B,CAEJ,CAEAC,CAASnB,EAASM,GAElBH,EAAQF,EAAOoB,KAAKC,UAAUhB,GAAcA,EAG9C,CAFE,MAAOiB,GACPnB,EAAOmB,EACT,CACF,EACF"}