{"version":3,"file":"index.modern.js","sources":["../src/index.ts"],"sourcesContent":["/**\n * Convert HTML to JSON or Object\n * @author Yousuf Kalim\n */\nimport { DOMParser } from 'xmldom';\n\ninterface JSONContent {\n  type: string;\n  attributes?: object;\n  content: Array<string | JSONContent>;\n}\n/**\n * @param element The HTML string or element to convert to JSON.\n * @param json A boolean to indicate if the output should be a JSON string.\n * @returns {Promise<unknown>}\n */\nasync function HTMLParser(element: Element | string, json = false): Promise<JSONContent | string> {\n  return await new Promise((resolve, reject) => {\n    try {\n      const treeObject: any = {};\n      let elementToParse: Element;\n\n      // If string convert to document Node\n      if (typeof element === 'string') {\n        const parser = new DOMParser();\n        const docNode = parser.parseFromString(element, 'text/xml');\n        if (docNode.firstChild) {\n          elementToParse = docNode.firstChild as Element;\n        }\n      } else {\n        elementToParse = element;\n      }\n\n      // Recursively loop through DOM elements and assign properties to object\n      const treeHTML = (element: Element, object = treeObject): void => {\n        object.type = element.nodeName;\n        const nodeList = element.childNodes;\n        if (nodeList !== null) {\n          if (nodeList.length) {\n            object.content = [];\n            for (let i = 0; i < nodeList.length; i++) {\n              if (nodeList[i].nodeType === 3) {\n                if (nodeList[i].nodeValue) {\n                  object.content.push(nodeList[i].nodeValue);\n                }\n              } else {\n                object.content.push({});\n                treeHTML(nodeList[i] as Element, object.content[object.content.length - 1]);\n              }\n            }\n          }\n        }\n        if (element.attributes !== null) {\n          if (element.attributes.length) {\n            object.attributes = {};\n            for (let i = 0; i < element.attributes.length; i++) {\n              object.attributes[element.attributes[i].nodeName] = element.attributes[i].nodeValue;\n            }\n          }\n        }\n      };\n\n      // @ts-expect-error\n      treeHTML(elementToParse);\n\n      resolve(json ? JSON.stringify(treeObject) : treeObject);\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n\nexport default HTMLParser;\n"],"names":["async","HTMLParser","element","json","Promise","resolve","reject","treeObject","docNode","DOMParser","parseFromString","firstChild","elementToParse","treeHTML","object","type","nodeName","nodeList","childNodes","length","content","i","nodeType","nodeValue","push","attributes","JSON","stringify","e"],"mappings":"mCAgBAA,eAAyBC,EAACC,EAA2BC,GAAO,GAC1D,aAAa,IAAWC,QAAC,CAACC,EAASC,KACjC,IACE,MAAMC,EAAkB,CAAA,EACxB,MAGA,GAAuB,iBAAZL,EAAsB,CAC/B,MACMM,GADS,IAAIC,GACIC,gBAAgBR,EAAS,YAC5CM,EAAQG,aACVC,EAAiBJ,EAAQG,WAE5B,MACCC,EAAiBV,EAInB,MAAMW,EAAW,CAACX,EAAkBY,EAASP,KAC3CO,EAAOC,KAAOb,EAAQc,SACtB,MAAcC,EAAGf,EAAQgB,WACzB,GAAiB,OAAbD,GACEA,EAASE,OAAQ,CACnBL,EAAOM,QAAU,GACjB,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAASE,OAAQE,IACN,IAAzBJ,EAASI,GAAGC,SACVL,EAASI,GAAGE,WACdT,EAAOM,QAAQI,KAAKP,EAASI,GAAGE,YAGlCT,EAAOM,QAAQI,KAAK,CAAA,GACpBX,EAASI,EAASI,GAAeP,EAAOM,QAAQN,EAAOM,QAAQD,OAAS,IAG7E,CAEH,GAA2B,OAAvBjB,EAAQuB,YACNvB,EAAQuB,WAAWN,OAAQ,CAC7BL,EAAOW,WAAa,CAAE,EACtB,IAAK,IAAKJ,EAAG,EAAGA,EAAInB,EAAQuB,WAAWN,OAAQE,IAC7CP,EAAOW,WAAWvB,EAAQuB,WAAWJ,GAAGL,UAAYd,EAAQuB,WAAWJ,GAAGE,SAE7E,CACF,EAIHV,EAASD,GAETP,EAAQF,EAAOuB,KAAKC,UAAUpB,GAAcA,EAG7C,CAFC,MAAOqB,GACPtB,EAAOsB,EACR,GAEL"}